
<!-- Page to store code before making changes -->

<!-- Navbar -->
<%- include("../includes/navbar.ejs") %>

<!-- Flash -->
<div class="container">
    <%- include("../includes/flash.ejs") %>
    <%- body %>
</div>

<!-- flash [age code] -->
 
<% if (success && success.length>0) { %>
    <div class="alert alert-success alert-dismissible fade show col-6 offset-3" role="alert">
        <%= success %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" ></button>
    </div>
    <% } %>

<!-- Navbar previous code before changes -->
 

<nav class="navbar navbar-expand-md bg-body-white border-bottom sticky-top">
    <div class="container-fluid">
        <a class="navbar-brand" href="/listings"><i class="fa-regular fa-compass"></i></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                
                <a class="nav-link" href="/listings">Explore</a>
                
            </div>

            <div class="navbar-nav ">
                <form class="d-flex" role="search">
                    <input class="form-control me-2 search-inp" type="search" placeholder="Search destinations" aria-label="Search">
                    <button class="btn search-btn" type="submit">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        Search
                    </button>
                  </form>
            </div>

            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/listings/new">AirBnb your home</a>
                <% if (!currUser) { %>
                    <a class="nav-link " href="/signup"><b>SignUp</b></a>
                    <a class="nav-link" href="/login"><b>Login</b></a>
                <% } %>
                <% if (currUser) { %>
                    <a class="nav-link" href="/logout"><b>LogOut</b></a>
                <% } %>
                
                
            </div>
        </div>
    </div>
</nav>

<!-- app js -->
if (process.env.NODE_ENV !="production") {
    require("dotenv").config();
}

const express = require('express');
const app = express();
const mongoose = require('mongoose');
const path = require('path'); 
const methodOverride = require("method-override");
const ejsMate = require("ejs-mate");

const listingRouter = require('./routes/listing.js');
const reviewRouter = require("./routes/review.js");
const userRouter = require('./routes/user.js');

const passport = require("passport");
const localStrategy = require("passport-local");
const User = require("./models/user.js");
const session = require('express-session');
const flash = require('connect-flash'); 

const ExpressError = require('./utils/ExpressError.js'); // Import custom error class

const MONGO_URL = 'mongodb://127.0.0.1:27017/wanderlust';

main().then(() => {
    console.log("Connected to DB");
}).catch((err) => {
    console.log(err);
});

async function main() {
    await mongoose.connect(MONGO_URL);
} 

// Set view engine and middleware
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));
app.use(express.urlencoded({ extended: true }));
app.use(methodOverride("_method"));
app.engine('ejs', ejsMate);
app.use(express.static(path.join(__dirname, "public")));

 
// Configure session options
const sessionOptions = {
    secret: 'your-secret-key', // Change this to a secure, random string
    resave: false,
    saveUninitialized: true,
    cookie: {
        httpOnly: true,
        secure: false, // Set to true if using HTTPS
        maxAge: 24 * 60 * 60 * 1000 // Cookie expiry time (24 hours)
    }
}; 
app.use(session(sessionOptions));
// Initialize passport
app.use(passport.initialize());
app.use(passport.session());

// Configure passport-local
passport.use(new localStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());





app.use(flash());  

app.use((req,res,next) =>{
    console.log("MiddleWare executed");
    console.log("User:",req.user);
    
    res.locals.success=req.flash("success");
    res.locals.error = req.flash("error");
    res.locals.currUser = req.user; 
    console.log(req); 
    next(); 
}) ;

app.get('/some-route', (req, res) => {
    console.log("res.locals:", res.locals);
    res.render('some-view'); 
});

   
// Use routes
app.use("/listings/:id/reviews", reviewRouter);
app.use("/listings", listingRouter);
app.use("/",userRouter);


// Handle 404 errors
app.all('*', (req, res, next) => {
    next(new ExpressError(404, "Page Not Found"));
}); 

// Error handling middleware
app.use((err, req, res, next) => {
    let { statusCode = 500, message } = err;
    res.status(statusCode).render("error.ejs", { message });
});

// Start server  
app.listen(8080, () => {
    console.log("Server is listening on port 8080");
});